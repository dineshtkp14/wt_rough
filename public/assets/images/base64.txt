<?php


namespace App\Http\Livewire;
use Barryvdh\DomPDF\Facade\Pdf as FacadePdf;
use Illuminate\Support\Facades\DB;
use App\Models\customerledgerdetails;
use App\Models\customerinfo;
use Livewire\Component;
use Livewire\WithPagination;

class AllcustomerCreditduelistlivewire extends Component
{
    
    use WithPagination;
    protected $paginationTheme = 'bootstrap';
    public $searchTerm = "";
    public $sortBy = '';

    public function render()
    {
        $perPage = 50; // Define the number of items per page

        $query = CustomerLedgerDetails::select(
            'customerid',
            \DB::raw('MAX(date) as latest_date'),
            \DB::raw('SUM(debit) AS total_debit'),
            \DB::raw('COALESCE(SUM(credit), 0) AS total_credit'),
            \DB::raw('COALESCE(SUM(debit), 0) - COALESCE(SUM(credit), 0) AS debit_credit_difference'
            ))
            ->where('invoicetype', 'credit')
            ->orWhere('invoicetype', 'payment')
            ->groupBy('customerid');

        // Apply search conditions
        if (!empty($this->searchTerm)) {
            $query->where(function ($query) {
                $query->where('customerid', 'like', "%" . $this->searchTerm . "%")
                    ->orWhereHas('customerinfo', function ($subQuery) {
                        $subQuery->where('name', 'like', "%" . $this->searchTerm . "%");
                    });
            });
        }

        // Reset pagination when sorting or filtering
        if (!empty($this->sortBy) || !empty($this->searchTerm)) {
            $this->resetPage();
        }

        // Paginate the results
        $allResults = $query->orderBy('debit_credit_difference', 'desc')->paginate($perPage);

        // Calculate serial number based on current page and items per page
        $serialNumber = ($allResults->currentPage() - 1) * $perPage + 1;

        // Fetch additional data
        foreach ($allResults as $data) {
            $data->serialNumber = $serialNumber++;

            if ($data->customerid) {
                $item = CustomerInfo::where('id', $data->customerid)->select('name', 'phoneno')->first();
                if ($item) {
                    $data->cname = $item->name;
                    $data->cphoneno = $item->phoneno;
                }
            }
        }

        // Calculate total debit-credit difference for display (considering only positive values)
        $totalDebitCreditDifference = $allResults->filter(function ($item) {
            return $item->debit_credit_difference >= 0; // Only consider positive or zero values
        })->sum('debit_credit_difference');

        // Calculate total debit-credit difference whole
        $totalDebitCreditDifferencewhole = $allResults->reduce(function ($carry, $item) {
            return $carry + max(0, $item->debit_credit_difference);
        }, 0);

        // Calculate total negative debit-credit difference for display
        $totalNegativeDebitCreditDifference = $allResults->filter(function ($item) {
            return $item->debit_credit_difference < 0;
        })->sum('debit_credit_difference');

        return view('livewire.allcustomer-creditduelistlivewire', [
            'all' => $allResults,
            'totalDebitCreditDifference' => $totalDebitCreditDifference,
            'totalDebitCreditDifferencewhole' => $totalDebitCreditDifferencewhole,
            'totalNegativeDebitCreditDifference' => $totalNegativeDebitCreditDifference
        ]);
    }





    public function generateallcustomerPDF()
{
    // Main query to get individual customer data
    $query = CustomerLedgerDetails::select(
        'customerid',
        \DB::raw('MAX(date) as latest_date'),
        \DB::raw('SUM(debit) AS total_debit'),
        \DB::raw('COALESCE(SUM(credit), 0) AS total_credit'),
        \DB::raw('COALESCE(SUM(debit), 0) - COALESCE(SUM(credit), 0) AS debit_credit_difference'
        ))
        ->where('invoicetype', 'credit')
        ->orWhere('invoicetype', 'payment')
        ->groupBy('customerid');

    // Apply search conditions
    if (!empty($this->searchTerm)) {
        $query->where(function ($query) {
            $query->where('customerid', 'like', "%" . $this->searchTerm . "%")
                ->orWhereHas('customerinfo', function ($subQuery) {
                    $subQuery->where('name', 'like', "%" . $this->searchTerm . "%");
                });
        });
    }

    // Paginate the results
    $allResults = $query->paginate(100);

    // Fetch additional data
    foreach ($allResults as $data) {
        if ($data->customerid) {
            $item = CustomerInfo::where('id', $data->customerid)->select('name', 'phoneno')->first();
            if ($item) {
                $data->cname = $item->name;
                $data->cphoneno = $item->phoneno;
            }
        }
    }

    // Reset pagination when generating PDF
    $this->resetPage();

    // Calculate total debit-credit difference for display (considering only positive values)
    $totalDebitCreditDifference = $allResults->filter(function ($item) {
        return $item->debit_credit_difference >= 0; // Only consider positive or zero values
    })->sum('debit_credit_difference');

    // Calculate total debit-credit difference whole
    $totalDebitCreditDifferencewhole = $allResults->reduce(function ($carry, $item) {
        return $carry + max(0, $item->debit_credit_difference);
    }, 0);

    // Calculate total negative debit-credit difference for display
    $totalNegativeDebitCreditDifference = $allResults->filter(function ($item) {
        return $item->debit_credit_difference < 0;
    })->sum('debit_credit_difference');

    $pdfView = view('allsalesdetails.allcustomercreditlistpdf', [
        'all' => $allResults,
        'totalDebitCreditDifference' => $totalDebitCreditDifference,
        'totalDebitCreditDifferencewhole' => $totalDebitCreditDifferencewhole,
        'totalNegativeDebitCreditDifference' => $totalNegativeDebitCreditDifference
    ]);

    // Generate PDF using FacadePdf
    $pdf = FacadePdf::setOptions(['dpi' => 150, 'defaultFont' => 'dejavu serif'])->loadHtml($pdfView);

    // Save the PDF to a temporary file
    $pdfFile = tempnam(sys_get_temp_dir(), 'credit_Due_List');
    $pdf->save($pdfFile);

    // Send headers to instruct the browser to open the PDF in a new tab
    return response()->file($pdfFile, [
        'Content-Type' => 'application/pdf',
        'Content-Disposition' => 'inline; filename="credit_Due_List_report.pdf"',
    ]);
}
}